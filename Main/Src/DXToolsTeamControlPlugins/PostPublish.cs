// <copyright file="PostPublish.cs" company="">
// Copyright (c) 2015 All Rights Reserved
// </copyright>
// <author>Steven Sagar</author>
// <date>4/3/2015 11:36:23 AM</date>
// <summary>Implements the PostPublish Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
namespace DXTools.CRM.Solutions.TeamControlPlugins
{
    using System;
    using System.ServiceModel;
    using Microsoft.Xrm.Sdk;
    using Microsoft.Crm.Sdk;
    using System.Net;
    using System.Text;
    using System.Collections.Generic;

    /// <summary>
    /// PostPublish Plugin.
    /// </summary>    
    public class PostPublish: Plugin
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostPublish"/> class.
        /// </summary>
        public PostPublish()
            : base(typeof(PostPublish))
        {
            base.RegisteredEvents.Add(new Tuple<int, string, string, Action<LocalPluginContext>>(40, "Publish", "", new Action<LocalPluginContext>(ExecutePostPublish)));
            base.RegisteredEvents.Add(new Tuple<int, string, string, Action<LocalPluginContext>>(40, "PublishAll", "", new Action<LocalPluginContext>(ExecutePostPublish)));

            // Note : you can register for more events here if this plugin is not specific to an individual entity and message combination.
            // You may also need to update your RegisterFile.crmregister plug-in registration file to reflect any change.
        }

        /// <summary>
        /// Executes the plug-in.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics CRM caches plug-in instances.
        /// The plug-in's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the plug-in. Also, multiple system threads
        /// could execute the plug-in at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        protected void ExecutePostPublish(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new ArgumentNullException("localContext");
            }

            try
            {
                const string PREFIX = "TEAMCONTROL_";
                var crmService = new CrmService(localContext.OrganizationService);
                var helpers = new Helpers { PrefixConst = PREFIX };
                string userName = helpers.GetUser(crmService, localContext, false);
                var mobileKeys = new List<string> { "mobileServiceUrl", "mobileServiceKey", "mobileServiceInstanceUrl" };
                IDictionary<string, string> mobileServiceConfig = helpers.CheckForSharedVariableFromMobileServiceConfig(localContext, crmService, mobileKeys, false);

                string url = mobileServiceConfig["mobileServiceUrl"] + "/api/SignalR?description=";
                string urlParam = "[" + mobileServiceConfig["mobileServiceInstanceUrl"] + "]" + System.Environment.NewLine + userName + " - Publish Finished";
                string applicationKey = mobileServiceConfig["mobileServiceKey"];

                helpers.BroadcastMessageUrl(url, urlParam, string.Empty, applicationKey);
            }
            catch(Exception e)
            {
                // Catching so we don't see errors for publish requests
                throw new InvalidPluginExecutionException(e.Message);
            }
        }

        
    }
}
