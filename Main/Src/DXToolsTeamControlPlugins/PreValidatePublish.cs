// <copyright file="PreValidatePublish.cs" company="">
// Copyright (c) 2015 All Rights Reserved
// </copyright>
// <author>Steven Sagar</author>
// <date>3/20/2015 10:49:27 AM</date>
// <summary>Implements the PreValidatePublish Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>

namespace DXTools.CRM.Solutions.TeamControlPlugins
{
    using System;
    using System.ServiceModel;
    using Microsoft.Xrm.Sdk;
    using Microsoft.Crm.Sdk;
    using System.Net;
    using System.Text;
    using System.Collections.Generic;

    /// <summary>
    /// PreValidatePublish Plugin.
    /// </summary>    
    public class PreValidatePublish : Plugin
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PreValidateMessageTypeCreate"/> class.
        /// </summary>
        public PreValidatePublish()
            : base(typeof(PreValidatePublish))
        {
            base.RegisteredEvents.Add(new Tuple<int, string, string, Action<LocalPluginContext>>(10, "Publish", "", new Action<LocalPluginContext>(ExecutePreValidatePublish)));
            base.RegisteredEvents.Add(new Tuple<int, string, string, Action<LocalPluginContext>>(10, "PublishAll", "", new Action<LocalPluginContext>(ExecutePreValidatePublish)));

            // Note : you can register for more events here if this plugin is not specific to an individual entity and message combination.
            // You may also need to update your RegisterFile.crmregister plug-in registration file to reflect any change.
        }

        /// <summary>
        /// Executes the plug-in.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics CRM caches plug-in instances.
        /// The plug-in's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the plug-in. Also, multiple system threads
        /// could execute the plug-in at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        protected void ExecutePreValidatePublish(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new ArgumentNullException("localContext");
            }

            try
            {
                var crmService = new CrmService(localContext.OrganizationService);
                string userName = crmService.GetUserName(localContext.PluginExecutionContext.UserId);
                IDictionary<string, string> teamConfigurationFields = crmService.GetMobileServiceConfiguration();

                string url = teamConfigurationFields["mobileserviceurl"] + "/api/SignalR?description=";
                string urlParam = userName + " is publishing...";
                string applicationKey = teamConfigurationFields["mobileservicekey"];

                BroadcastMessageUrl(url, urlParam, string.Empty, applicationKey);
            }
            catch
            {
                // Catching so we don't see errors for publish requests
            }
        }

        /// <summary>
        /// Currently just a GET request but should change to POST request
        /// Try async call for fire and forget
        /// </summary>
        /// <param name="url"></param>
        /// <param name="message"></param>
        /// <param name="applicationUser"></param>
        /// <param name="applicationPassword"></param>
        private void BroadcastMessageUrl(string url, string message, string applicationUser, string applicationPassword)
        {
            string authInfo = applicationUser + ":" + applicationPassword;
            authInfo = Convert.ToBase64String(Encoding.Default.GetBytes(authInfo));
            string requestUrl = url + message;
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(requestUrl);
            request.Timeout = 5000;
            request.Headers.Add("Authorization", "Basic " + authInfo);
            request.ContentType = "application/x-www-form-urlencoded";
            request.Method = "GET"; //could change to POST

            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
        }
    }
}
